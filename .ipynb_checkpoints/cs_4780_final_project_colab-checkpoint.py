# -*- coding: utf-8 -*-
"""CS 4780 Final Project Colab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TftT0GYnnatibtx9V7RSPWmICJ915sPU

<h2>CS 4780/5780 Final Project: </h2>
<h3>Election Result Prediction for US Counties</h3>

Names and NetIDs for your group members:

Rohan Lewis, rl447

Haashim Hussain Shah, hhs66

Hudson Fernandes, haf48

<h3>Introduction:</h3>

<p> The final project is about conducting a real-world machine learning project on your own, with everything that is involved. Unlike in the programming projects 1-5, where we gave you all the scaffolding and you just filled in the blanks, you now start from scratch. The programming project provide templates for how to do this, and the most recent video lectures summarize some of the tricks you will need (e.g. feature normalization, feature construction). So, this final project brings realism to how you will use machine learning in the real world.  </p>

The task you will work on is forecasting election results. Economic and sociological factors have been widely used when making predictions on the voting results of US elections. Economic and sociological factors vary a lot among counties in the United States. In addition, as you may observe from the election map of recent elections, neighbor counties show similar patterns in terms of the voting results. In this project you will bring the power of machine learning to make predictions for the county-level election results using Economic and sociological factors and the geographic structure of US counties. </p>
<p>

<h3>Your Task:</h3>
Plase read the project description PDF file carefully and make sure you write your code and answers to all the questions in this Jupyter Notebook. Your answers to the questions are a large portion of your grade for this final project. Please import the packages in this notebook and cite any references you used as mentioned in the project description. You need to print this entire Jupyter Notebook as a PDF file and submit to Gradescope and also submit the ipynb runnable version to Canvas for us to run.

<h3>Due Date:</h3>
The final project dataset and template jupyter notebook will be due on <strong>December 15th</strong> . Note that <strong>no late submissions will be accepted</strong>  and you cannot use any of your unused slip days before.
</p>

![image.png; width="100";](attachment:image.png)

<h2>Part 1: Basics</h2><p>

<h3>1.1 Import:</h3><p>
Please import necessary packages to use. Note that learning and using packages are recommended but not required for this project. Some official tutorial for suggested packacges includes:
    
https://scikit-learn.org/stable/tutorial/basic/tutorial.html
    
https://pytorch.org/tutorials/
    
https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html
<p>
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install interpret

import os
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import random
from interpret import show
from interpret.data import ClassHistogram
from interpret.glassbox import ExplainableBoostingClassifier, LinearRegression, RegressionTree
from interpret.perf import RegressionPerf, ROC
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.neighbors import KNeighborsClassifier
# TODO

"""<h3>1.2 Weighted Accuracy:</h3><p>
Since our dataset labels are heavily biased, you need to use the following function to compute weighted accuracy throughout your training and validation process and we use this for testing on Kaggle.
<p>
"""

def weighted_accuracy(pred, true):
    assert(len(pred) == len(true))
    num_labels = len(true)
    num_pos = sum(true)
    num_neg = num_labels - num_pos
    frac_pos = num_pos/num_labels
    weight_pos = 1/frac_pos
    weight_neg = 1/(1-frac_pos)
    num_pos_correct = 0
    num_neg_correct = 0
    for pred_i, true_i in zip(pred, true):
        num_pos_correct += (pred_i == true_i and true_i == 1)
        num_neg_correct += (pred_i == true_i and true_i == 0)
    weighted_accuracy = ((weight_pos * num_pos_correct) 
                         + (weight_neg * num_neg_correct))/((weight_pos * num_pos) + (weight_neg * num_neg))
    return weighted_accuracy

"""<h2>Part 2: Baseline Solution</h2><p>
Note that your code should be commented well and in part 2.4 you can refer to your comments. (e.g. # Here is SVM, 
# Here is validation for SVM, etc). Also, we recommend that you do not to use 2012 dataset and the graph dataset to reach the baseline accuracy for 68% in this part, a basic solution with only 2016 dataset and reasonable model selection will be enough, it will be great if you explore thee graph and possibly 2012 dataset in Part 3.

<h3>2.1 Preprocessing and Feature Extraction:</h3><p>
Given the training dataset and graph information, you need to correctly preprocess the dataset (e.g. feature normalization). For baseline solution in this part, you might not need to introduce extra features to reach the baseline test accuracy.
<p>
"""

# You may change this but we suggest loading data with the following code and you may need to change
# datatypes and do necessary data transformation after loading the raw data to the dataframe.
# df = pd.read_csv(dataset_path, sep=',',header=None, encoding='unicode_escape')

# Make sure you comment your code clearly and you may refer to these comments in the part 2.4
# TODO

# Note: thousands parameter needed so that MedianIncome column treated as an int

def read_csv(csv_path):
  return pd.read_csv(csv_path, thousands=',')

train_2012 = read_csv('./train_2012.csv')
train_2016 = read_csv('./train_2016.csv')
train_2016_cr = read_csv('./train_2016.csv')

test_2012 = read_csv('./test_2016_no_label.csv')
test_2016 = read_csv('./test_2016_no_label.csv')

graph = read_csv('./graph.csv')
#pd.read_csv('./train_2016.csv', thousands=',')
test_2016.head()

print(graph.head())
len(graph)

# drop columns that will not be used in feature space
def drop_cols(data, is_train):
    cols = ['FIPS', 'County', 'DEM', 'GOP', 'Winner'] if is_train else ['FIPS','County'] 
    return data.drop(columns=cols).to_numpy()

def drop_cols_cr(data, is_train):
    cols = ['FIPS', 'County','MigraRate','BirthRate', 'DEM', 'GOP', 'Winner'] if is_train else ['FIPS','County','MigraRate','BirthRate'] 
    return data.drop(columns=cols).to_numpy()

# returns a binary array where 1 is a Democratic county, 0 is a Republican county
def get_winners(train_data):
    train_data["Winner"] = 0 + (train_data["DEM"] > train_data["GOP"])
    return train_data["Winner"].to_numpy()

#use standardization to normalize features
def standardize_features(train_data, mean, std):
    return np.divide(np.subtract(train_data, mean), std)

Y_train = get_winners(train_2016)
Y_train_cr = get_winners(train_2016_creative)

print("Percent of democratic voting counties:", sum(Y_train)/len(Y_train) * 100)

#X_train = drop_cols(train_2016, True)
X_train = drop_cols_cr(train_2016, True)

#X_train_cr = drop_cols_cr(train_2016_cr, True)

mean_X_train = np.mean(X_train, axis=0)
std_X_train = np.std(X_train, axis=0)

X_train = standardize_features(X_train, mean_X_train, std_X_train)
print(drop_cols(train_2016, True).shape)

#X_test = drop_cols(test_2016, False)
X_test = drop_cols_cr(test_2016, False)
X_test = standardize_features(X_test, mean_X_train, std_X_train)
print(X_test)

X_train_cr

#X_train_interp = drop_cols(train_2016, True)

hist = ClassHistogram().explain_data(X_train_cr, Y_train, name = 'Train Data')

show(hist)

ebm_t = ExplainableBoostingClassifier(random_state=42)
ebm_t.fit(X_train_cr, Y_train)

ebm_t_global = ebm_t.explain_global(name='EBM Unstandardized Features')
show(ebm_t_global)

X_t_train, X_t_test, Y_t_train, Y_t_test = train_test_split(X_train_cr, Y_train, test_size = 0.2)

ebm_split = ExplainableBoostingClassifier(random_state=42)
ebm_split.fit(X_t_train, Y_t_train)

ebm_split_global = ebm_split.explain_global(name='EBM Split')
show(ebm_split_global)

ebm_t_perf = ROC(ebm_t.predict_proba).explain_perf(X_t_test, Y_t_test, name='EBM Split')
show(ebm_t_perf)

# try on normalized features
ebm_t_perf = ROC(ebm_t.predict_proba).explain_perf(X_t_test, Y_t_test, name='EBM Split')
show(ebm_t_perf)

# build a linear regression and regression tree for comparison
lr = LinearRegression(random_state=42)
lr.fit(X_train, Y_train)
rt = RegressionTree(random_state=42)
rt.fit(X_train, Y_train)

ebm_std = ExplainableBoostingClassifier(random_state=42)
ebm_std.fit(X_train, Y_train)

ebm_perf = RegressionPerf(ebm.predict).explain_perf(X_test, Y_test, name='EBM')
lr_perf = RegressionPerf(lr.predict).explain_perf(X_test, Y_test, name='Linear Regression')
rt_perf = RegressionPerf(rt.predict).explain_perf(X_test, Y_test, name='Regression Tree')
show(ebm_perf)
show(lr_perf)
show(rt_perf)

#lr_perf = ROC(lr_model.predict_proba).explain_perf(X_t_test, Y_t_test, name=’Logistic Regression’)
#tree_perf = ROC(rf_model.predict_proba).explain_perf(X_t_test, Y_t_test, name=’Classification Tree’)
#lgbm_perf = ROC(lgb_model.predict_proba).explain_perf(X_t_test, Y_t_test, name=’Light GBM’)
ebm_perf = ROC(ebm_t.predict_proba).explain_perf(X_t_test, Y_t_test)
# show(lr_perf)
# show(tree_perf)
show(ebm_perf)
# show(lgbm_perf)

# NOTE: binning is not used in the first model
train_2016['MedianIncome'] = train_2016['MedianIncome'].astype(float)
train_2016['MedianIncome'].describe()

fig, ax = plt.subplots()
train_2016['MedianIncome'].hist(bins=30, color='#A9C5D3', edgecolor='black', grid=False)

quantile_list = [0, .25, .5, .75, 1.]
quantiles = train_2016['MedianIncome'].quantile(quantile_list)

# visualize these quantiles in a distribution histogram
# Referenced: https://towardsdatascience.com/understanding-feature-engineering-part-1-continuous-numeric-data-da4e47099a7b
for quantile in quantiles:
    qvl = plt.axvline(quantile, color='r')
ax.legend([qvl], ['Quantiles'], fontsize=10)
ax.set_title('County Median Income Histogram', fontsize=12)
ax.set_xlabel('County Median Income', fontsize=12)
ax.set_ylabel('Frequency', fontsize=12)

# Use Quantile based binning for income since the distribution of values is skewed
quantile_labels = ['0-25Q', '25-50Q', '50-75Q', '75-100Q']
train_2016['Income_quantile_range'] = pd.qcut(
                                            train_2016['MedianIncome'], 
                                            q=quantile_list)
train_2016['Income_quantile_label'] = pd.qcut(
                                            train_2016['MedianIncome'], 
                                            q=quantile_list,       
                                            labels=quantile_labels)

train_2016[['FIPS', 'MedianIncome', 'Income_quantile_range', 
               'Income_quantile_label']].head()

"""<h3>2.2 Use At Least Two Training Algorithms from class:</h3><p>
You need to use at least two training algorithms from class. You can use your code from previous projects or any packages you imported in part 1.1.
"""



# Model 1: KNN
def knn(X,Y):
    kf = KFold(n_splits=5)
    kf.get_n_splits(X)
    neigh = KNeighborsClassifier(n_neighbors=1)
    splits = kf.split(X)
    
    accs = []
    idxs = []
    
    for tr, val in splits:
        neigh.fit(X[tr], Y[tr])
        accs.append(weighted_accuracy(neigh.predict(X[val]), Y[val]))
        idxs.append(tr)
    return neigh, accs, idxs

def knnclassifier(X,Y):
    neigh, accs, idxs = knn(X,Y)
    best_idx = idxs[np.argmax(accs)]
    neigh.fit(X[best_idx], Y[best_idx])
    return neigh

model_1_knn = knnclassifier(X_train,Y_train)

def EBM(X,Y):
  kf = KFold(n_splits=5)
  kf.get_n_splits(X)
  ebm = ExplainableBoostingClassifier()
  splits = kf.split(X)

  accs = []
  idxs = []

  for tr, val in splits:
    ebm.fit(X[tr],Y[tr])
    accs.append(weighted_accuracy(ebm.predict(X[val]), Y[val]))
    idxs.append(tr)
  return ebm, accs, idxs

def EBMclassifier(X,Y):
  ebm, accs, idxs = EBM(X,Y)
  best_idx = idxs[np.argmax(accs)]
  ebm.fit(X[best_idx], Y[best_idx])
  return ebm
  
model_3_EBM = EBMclassifier(X_train,Y_train)
model_3_sparse_EBM = EBMclassifier(X_train,Y_train)
  #ebm.fit()

"""<h3>2.3 Training, Validation and Model Selection:</h3><p>
You need to split your data to a training set and validation set or performing a cross-validation for model selection.
"""

# Make sure you comment your code clearly and you may refer to these comments in the part 2.4
# TODO

"""<h3>2.4 Explanation in Words:</h3><p>
    You need to answer the following questions in the markdown cell after this cell:

2.4.1 How did you preprocess the dataset and features?

2.4.2 Which two learning methods from class did you choose and why did you made the choices?

2.4.3 How did you do the model selection?

2.4.4 Does the test performance reach a given baseline 68% performanc? (Please include a screenshot of Kaggle Submission)

<h2>Part 3: Creative Solution</h2><p>

<h3>3.1 Open-ended Code:</h3><p>
You may follow the steps in part 2 again but making innovative changes like creating new features, using new training algorithms, etc. Make sure you explain everything clearly in part 3.2. Note that reaching the 75% creative baseline is only a small portion of this part. Any creative ideas will receive most points as long as they are reasonable and clearly explained.
"""

pip install -U shap

from interpret import show
from interpret.data import ClassHistogram

pip install interpret

# Make sure you comment your code clearly and you may refer to these comments in the part 3.2
# TODO
pip install interpret

"""<h3>3.2 Explanation in Words:</h3><p>

You need to answer the following questions in a markdown cell after this cell:

3.2.1 How much did you manage to improve performance on the test set compared to part 2? Did you reach the 75% accuracy for the test in Kaggle? (Please include a screenshot of Kaggle Submission)

3.2.2 Please explain in detail how you achieved this and what you did specifically and why you tried this.

<h2>Part 4: Kaggle Submission</h2><p>
You need to generate a prediction CSV using the following cell from your trained model and submit the direct output of your code to Kaggle. The CSV shall contain TWO column named exactly "FIPS" and "Result" and 1555 total rows excluding the column names, "FIPS" column shall contain FIPS of counties with same order as in the test_2016_no_label.csv while "Result" column shall contain the 0 or 1 prdicaitons for corresponding columns. A sample predication file can be downloaded from Kaggle.
"""

# TODO

# You may use pandas to generate a dataframe with FIPS and your predictions first 
# and then use to_csv to generate a CSV file.

def gen_CSV(model, test_df, csv_path, X_test):
    df = pd.DataFrame(test_df, columns=['FIPS'])
    df["Result"] = model.predict(X_test)
    df.to_csv(csv_path, index=False, header=True)
gen_CSV(model_1_knn, test_2016, "model_1_knn_sparse.csv", X_test)
# gen_CSV(model_3_EBM, test_2016, "model_3_EBM.csv", X_test)
gen_CSV(model_3_sparse_EBM, test_2016, "model_3_EBM_sparse.csv", X_test)

"""<h2>Part 5: Resources and Literature Used</h2><p>"""